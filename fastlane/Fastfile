default_platform :android

APP_ID = 'com.mataku.scrobscrob'.freeze

platform :android do
  before_all do |lane|
    # gradle(task: 'clean')
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  lane :setup_for_ci do
    Dir.chdir('..') do
      sh('echo "API_KEY=\"$LAST_FM_API_KEY\"" >> local.properties')
      sh('echo "SHARED_SECRET=\"$LAST_FM_SHARED_SECRET\"" >> local.properties')
      sh('echo $GOOGLE_SERVICES_JSON > app/google-services.json')
    end
  end

  lane :build_debug do
    gradle(task: "assembleDebug")
  end

  desc "Run unit tests"
  lane :test do
    gradle(task: "testDebugUnitTest -PexcludeScreenshotTest=true")
  end

  desc "Run androidTest on connected device"
  lane :android_test do
    android_test_gradle_tasks = android_test_dirs.map do |dir|
      "#{dir}:connectedDebugAndroidTest"
    end
    unless android_test_gradle_tasks.empty?
      gradle(task: android_test_gradle_tasks.join(' '))
    end
  end

  desc "Run screenshot test"
  lane :screenshot_test do
    gradle(task: 'verifyRoborazziDebug --no-configuration-cache -PonlyScreenshotTest=true')
  end

  desc "Build an aab"
  lane :build do
    gradle(task: 'bundleRelease')
  end

  lane :fetch_metadata do
    download_from_play_store(
      package_name: APP_ID
    )
  end

  desc "Deploy a new version to the Google Play internal stage"
  lane :deploy_internal do
    gradle(task: "bundleRelease")
    supply(
      aab: 'app/build/outputs/bundle/release/app-release.aab',
      track: 'internal',
      skip_upload_metadata: false,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_apk: true
    )
  end

  desc "Deploy a new version to the Google Play internal app sharing"
  lane :deploy_internal_app_sharing do
    gradle(task: "bundleRelease")
    upload_to_play_store_internal_app_sharing(
      package_name: APP_ID,
      aab: 'app/build/outputs/bundle/release/app-release.aab',
    )
  end

  # To upload an aab, needs to link Google Play Account to your Firebase project, so upload an apk currently
  lane :deploy_to_firebase_app_distribution do
    gradle(task: 'assembleRelease')
    firebase_app_distribution(
      app: ENV['FIREBASE_APP_ID'],
      android_artifact_type: 'APK',
      android_artifact_path: 'app/build/outputs/apk/release/app-release.apk',
      release_notes_file: './release_notes.txt',
      groups: 'tester'
    )
  end

  lane :notify_current_track_status do
    require 'google-apis-androidpublisher_v3'

    json_key_io = File.open('../app/app-publisher.json')
    scopes = ['https://www.googleapis.com/auth/androidpublisher'].freeze
    credential = Google::Auth::ServiceAccountCredentials.make_creds(json_key_io: json_key_io, scope: scopes)
    android_publisher = Google::Apis::AndroidpublisherV3::AndroidPublisherService.new
    android_publisher.authorization = credential
    app_edit = android_publisher.insert_edit(APP_ID)
    tracks_response = android_publisher.list_edit_tracks(APP_ID, app_edit.id)
    production_release = tracks_response.tracks.find {|track| track.track == 'production'}
    production_release.releases.each do |release|
      UI.message "#{release.name}'s release status: #{release.status}"
    end
  end

  lane :prepare_release_notes do
    Dir.chdir '..' do
      version_code = generate_version_code
      `cp fastlane/metadata/android/en-US/changelogs/97.txt fastlane/metadata/android/en-US/changelogs/#{version_code}.txt`
      `cp fastlane/metadata/android/ja-JP/changelogs/97.txt fastlane/metadata/android/ja-JP/changelogs/#{version_code}.txt`
    end
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end

  def android_test_dirs
    Dir.chdir '..' do
      raw_android_test_dirs = `find . -name 'androidTest' -type d | grep 'src'`
      raw_android_test_dirs.split("\n").map do |dir|
        dir.split('/src')[0].gsub(/\./, '').gsub(/\//, ':')
      end
    end
  end

 def generate_version_code
    # e.g. 1.0.0
    version_name = `grep 'appVersionName =' build-logic/convention/src/main/java/ApplicationConventionPlugin.kt | awk -F'= ' '{print $2}'`.chomp.delete('"')
    version_map = version_name.split('.').map(&:to_i)
    version_map[0] * 1000000 + version_map[1] * 1000 + version_map[2]
  end
end
