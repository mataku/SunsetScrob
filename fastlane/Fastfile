default_platform :android

platform :android do
  before_all do
    # gradle(task: 'clean')
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  lane :setup_for_ci do
    Dir.chdir('..') do
      sh('echo "API_KEY=\"$LAST_FM_API_KEY\"" >> local.properties')
      sh('echo "SHARED_SECRET=\"$LAST_FM_SHARED_SECRET\"" >> local.properties')
      sh('echo $GOOGLE_SERVICES_JSON > app/google-services.json')
    end
  end

  lane :build_debug do
    gradle(task: "bundleDebug")
  end

  desc "Run unit tests"
  lane :test do
    gradle(task: "testDebugUnitTest")
  end

  desc "Run androidTest on connected device"
  lane :android_test do
    android_test_gradle_tasks = android_test_dirs.map do |dir|
      "#{dir}:connectedDebugAndroidTest"
    end.join(' ')
    gradle(task: android_test_gradle_tasks)
  end

  desc "Build an aab"
  lane :build do
    gradle(task: 'bundleRelease')
  end

  lane :fetch_metadata do
    download_from_play_store(
      package_name: 'com.mataku.scrobscrob'
    )
  end

  desc "Deploy a new version to the Google Play internal stage"
  lane :deploy_internal do
    gradle(task: "bundleRelease")
    supply(
      aab: 'app/build/outputs/bundle/release/app-release.aab',
      track: 'internal',
      skip_upload_metadata: false,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_apk: true
    )
  end

  desc "Deploy a new version to the Google Play internal app sharing"
  lane :deploy_internal_app_sharing do
    gradle(task: "bundleRelease")
    upload_to_play_store_internal_app_sharing(
      package_name: 'com.mataku.scrobscrob',
      aab: 'app/build/outputs/bundle/release/app-release.aab',
    )
  end

  # To upload an aab, needs to link Google Play Account to your Firebase project, so upload an apk currently
  lane :deploy_to_firebase_app_distribution do
    gradle(task: 'assembleDebug')
    firebase_app_distribution(
      app: ENV['FIREBASE_DEV_APP_ID'],
      android_artifact_type: 'APK',
      android_artifact_path: 'app/build/outputs/apk/debug/app-debug.apk',
      release_notes_file: './release_notes.txt',
      service_credentials_file: 'app/app-distribution.json',
      groups: 'tester'
    )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end

  def android_test_dirs
    Dir.chdir '..' do
      raw_android_test_dirs = `find . -name 'androidTest' -type d | grep 'src'`
      raw_android_test_dirs.split("\n").map do |dir|
        dir.split('/src')[0].gsub(/\./, '').gsub(/\//, ':')
      end
    end
  end
end
