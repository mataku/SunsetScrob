import dependency.Versions
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'

apply from: "lint-checks.gradle"
apply from: "$project.rootDir/test_dependencies.gradle"
apply from: "$project.rootDir/test_options.gradle"

android {
    compileSdkVersion Versions.compileSdkVersion
    buildFeatures {
        dataBinding = true
        compose = true
    }

    defaultConfig {
        applicationId 'com.mataku.scrobscrob'
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode 91
        versionName '0.9.1'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
        proguardFiles(getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro")
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
        }
        release {
            storeFile file("../SunsetScrob.jks")
            storePassword System.getenv("SUNSET_STORE_PASSWORD")
            keyAlias System.getenv("SUNSET_KEY_ALIAS")
            keyPassword System.getenv("SUNSET_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix '.dev'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
        textReport true
        textOutput "stdout"
        xmlReport false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.kotlin.compiler.extension.get()
    }

    packagingOptions {
        exclude("META-INF/atomicfu.kotlin_module")
        exclude("META-INF/kotlinx-coroutines-io.kotlin_module")
        exclude("META-INF/kotlinx-io.kotlin_module")
        exclude("META-INF/ktor-client-json.kotlin_module")
        exclude("META-INF/ktor-client-core.kotlin_module")
        exclude("META-INF/ktor-http.kotlin_module")
        exclude("META-INF/ktor-utils.kotlin_module")
        exclude("META-INF/kotlinx-coroutines-core.kotlin_module")
        exclude("META-INF/kotlinx-serialization-runtime.kotlin_module")
        exclude("META-INF/gradle/incremental.annotation.processors")
    }

//    dynamicFeatures [':feature:licenses']
}

dependencies {
    implementation project(":core")
    implementation project(":data:repository")

    implementation libs.activity.ktx
    implementation libs.material
    implementation libs.coroutines

    implementation libs.firebase.crashlytics

    implementation libs.room.runtime
    kapt libs.room.compiler

    implementation libs.hilt.android
    kapt libs.hilt.compiler
    kapt libs.hilt.android.compiler

    implementation(project(":ui_common"))
    implementation libs.activity.compose
    implementation libs.compose.ui.tooling
    implementation libs.compose.animation
    implementation libs.compose.material
    implementation libs.compose.navigation
    implementation libs.coil.compose
    implementation libs.accompanist.navigation.animation
    implementation libs.hilt.navigation.compose
    implementation libs.compose.material.icons.extended
}

kapt {
    correctErrorTypes true
    javacOptions {
        option("-Xmaxerrs", 1000)
    }
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}
