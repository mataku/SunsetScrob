import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'deploygate'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.cookpad.android.licensetools'
apply plugin: 'io.fabric'
apply plugin: 'de.mannodermaus.android-junit5'
apply from: 'lint-checks.gradle'
apply from: '../core_dependencies.gradle'

android {
    compileSdkVersion Versions.compileSdkVersion

    dataBinding {
        enabled = true
    }
    signingConfigs {
        release {
            storeFile file('../SunsetScrob.jks')
            storePassword System.getenv('SUNSET_STORE_PASSWORD')
            keyAlias System.getenv('SUNSET_KEY_ALIAS')
            keyPassword System.getenv('SUNSET_KEY_PASSWORD')
        }
        debug {
            storeFile file('../debug.keystore')
        }
    }
    defaultConfig {
        applicationId "com.mataku.scrobscrob"

        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode 22
        versionName "0.2.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        def properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        buildConfigField 'String', 'API_KEY', properties.API_KEY
        buildConfigField 'String', 'SHARED_SECRET', properties.SHARED_SECRET
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix '.dev'
        }
    }
    lintOptions {
        abortOnError false
        textReport true
        textOutput 'stdout'
        xmlReport false
        check lintchecks
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':core')
    implementation project(':feature:licenses')

    implementation Deps.cardView
    implementation Deps.lifecycleExtensions
    implementation Deps.materialComponent
    implementation Deps.preference

    implementation Deps.okhttp
    implementation Deps.okhttpLoggingInterceptor

    implementation Deps.kotlinCoroutinesAndroid
    implementation Deps.kotlinCoroutinesCore

    implementation Deps.retrofit
    implementation Deps.retrofitMoshiConverter

    implementation Deps.rxjava

    implementation Deps.epoxy
    implementation Deps.epoxyDatabinding
    kapt Deps.epoxyProcessor

    implementation Deps.moshi
    implementation Deps.moshiKotlin

    implementation Deps.retrofitKotlinCoroutinesAdapter
    implementation Deps.firebaseCore
    implementation Deps.crashlytics

    implementation Deps.roomRuntime
    kapt Deps.roomCompiler

    implementation Deps.koinAndroid
    implementation Deps.koinAndroidXScope
    implementation Deps.koinAndroidXViewModel

    testImplementation Deps.junit
    testImplementation Deps.guava
    testImplementation Deps.kotlinTestJunit
    testImplementation Deps.robolectric
    testImplementation Deps.mockWebServer

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"

    testImplementation "org.junit.jupiter:junit-jupiter-params:5.3.1"

    testImplementation "androidx.test:core:1.0.0"
}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven {
      url 'https://maven.google.com'
    }
}

kapt {
    correctErrorTypes = true
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
