apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android'
apply plugin: 'deploygate'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.cookpad.android.licensetools'
apply from: 'lint-checks.gradle'

android {
    compileSdkVersion buildConfig.compileSdk

    dataBinding {
        enabled = true
    }
    signingConfigs {
        release {
            storeFile file('../SunsetScrob.jks')
            storePassword System.getenv('SUNSET_STORE_PASSWORD')
            keyAlias System.getenv('SUNSET_KEY_ALIAS')
            keyPassword System.getenv('SUNSET_KEY_PASSWORD')
        }
        debug {
            storeFile file('../debug.keystore')
        }
    }
    defaultConfig {
        applicationId "com.mataku.scrobscrob"

        minSdkVersion buildConfig.targetSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode 20
        versionName "0.2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        def properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        buildConfigField 'String', 'API_KEY', properties.API_KEY
        buildConfigField 'String', 'SHARED_SECRET', properties.SHARED_SECRET
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix '.dev'
        }
    }
    lintOptions {
        abortOnError false
        textReport true
        textOutput 'stdout'
        xmlReport false
        check lintchecks
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$versions.androidx"
    implementation "androidx.cardview:cardview:$versions.androidx"
    implementation "androidx.browser:browser:$versions.androidx"
    implementation "com.google.android.material:material:$versions.androidx"

    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlinCoroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinCoroutines"

    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofit"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayout"
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxjava"

    implementation "com.github.bumptech.glide:glide:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"
    implementation("jp.wasabeef:glide-transformations:$versions.glideTransformations") {
        exclude module: 'com.github.bumptech.glide'
    }

    implementation "com.airbnb.android:epoxy:$versions.epoxy"
    implementation "com.airbnb.android:epoxy-databinding:$versions.epoxy"
    kapt "com.airbnb.android:epoxy-processor:$versions.epoxy"

    implementation "se.ansman.kotshi:api:$versions.kotshi"
    kapt "se.ansman.kotshi:compiler:$versions.kotshi"

    implementation "io.realm:android-adapters:$versions.realmAndroidAdapters"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:$versions.retrofitKotlinCoroutinesAdapter"

    testImplementation "junit:junit:$versions.junit"
    testImplementation "com.google.guava:guava:$versions.guava"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
    testImplementation "org.robolectric:robolectric:$versions.robolectric"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"
}
repositories {
    mavenCentral()
    maven {
        url 'https://maven.google.com'
    }
}

kapt {
    correctErrorTypes = true
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
kotlin {
    experimental {
        coroutines "enable"
    }
}
